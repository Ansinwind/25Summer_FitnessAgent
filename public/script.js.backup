document.addEventListener('DOMContentLoaded', () => {















    // ExerciseDB（vercel 版本）获取 GIF，无需密钥
    const normalizeExerciseNameZhToEn = (nameZh) => {
        const cleaned = String(nameZh || '').replace(/（.*?）/g, '').replace(/[()]/g, '').trim();
        const dict = {
            '杠铃深蹲': 'barbell squat',
            '杠铃卧推': 'barbell bench press',
            '杠铃卧推 平板': 'barbell bench press',
            '卧推': 'bench press',
            '引体向上': 'pull up',
            '杠铃划船': 'barbell row',
            '哑铃弯举': 'dumbbell curl',
            '绳索下压': 'triceps pushdown',
            '窄距俯卧撑': 'close grip push up',
            '集中弯举': 'concentration curl',
            '击掌俯卧撑': 'clap push up',
            '杠铃肩推': 'barbell shoulder press',
            '肩推': 'shoulder press'
        };
        // 尝试直接命中
        if (dict[cleaned]) return dict[cleaned];
        // 处理常见组合词
        if (cleaned.includes('卧推')) return 'bench press';
        if (cleaned.includes('俯卧撑')) return 'push up';
        if (cleaned.includes('弯举')) return 'curl';
        if (cleaned.includes('划船')) return 'row';
        if (cleaned.includes('深蹲')) return 'squat';
        if (cleaned.includes('肩推')) return 'shoulder press';
        return cleaned;
    };

    const pickBestExerciseMatch = (queryEn, list) => {
        if (!Array.isArray(list) || list.length === 0) return null;
        const q = String(queryEn || '').toLowerCase();
        let best = list[0];
        let bestScore = -1;
        for (const item of list) {
            const n = String(item.name || '').toLowerCase();
            let score = 0;
            if (n === q) score = 100;
            else if (n.includes(q)) score = 80;
            else {
                const parts = q.split(/\s+/).filter(Boolean);
                let hits = 0;
                for (const p of parts) if (n.includes(p)) hits += 1;
                score = hits * 10;
            }
            if (score > bestScore) { bestScore = score; best = item; }
        }
        return best;
    };

    const fetchExerciseGif = async (exerciseNameZh) => {
        const exerciseNameEn = normalizeExerciseNameZhToEn(exerciseNameZh);
        const url = `/api/exercise/search?q=${encodeURIComponent(exerciseNameEn)}`;
        try {
            const res = await fetch(url);
            const data = await res.json();
            const list = data && Array.isArray(data.data) ? data.data : [];
            const best = pickBestExerciseMatch(exerciseNameEn, list);
            return best?.gifUrl || '';
        } catch (e) {
            console.error('ExerciseDB fetch failed:', e);
            return '';
        }
    };

    // 日历点击展示锻炼计划弹窗
    const showWorkoutModal = (dayPlan) => {
        // 简单弹窗实现
        let modal = document.getElementById('workout-modal');
        if (!modal) {
            modal = document.createElement('div');
            modal.id = 'workout-modal';
            modal.style.position = 'fixed';
            modal.style.top = '50%';
            modal.style.left = '50%';
            modal.style.transform = 'translate(-50%, -50%)';
            modal.style.background = '#fff';
            modal.style.padding = '32px 24px';
            modal.style.borderRadius = '12px';
            modal.style.boxShadow = '0 4px 24px rgba(0,0,0,0.18)';
            modal.style.zIndex = '9999';
            modal.style.minWidth = '320px';
            modal.innerHTML = `<button id='close-workout-modal' style='position:absolute;top:12px;right:18px;font-size:20px;background:none;border:none;cursor:pointer;'>&times;</button>`;
            document.body.appendChild(modal);
        }
        let html = `<h3>${dayPlan.date} 锻炼计划</h3>`;
        if (dayPlan.exercises && dayPlan.exercises.length) {
            dayPlan.exercises.forEach(ex => {
                html += `<div class='plan-card'><strong>${ex.name}</strong><br>组数: ${ex.sets}，次数: ${ex.reps}<br>${ex.notes ? '备注: ' + ex.notes : ''}<br>${ex.gifUrl ? `<img src='${ex.gifUrl}' style='max-width:120px;margin-top:8px;'>` : ''}</div>`;
            });
        } else {
            html += '<p>暂无锻炼内容。</p>';
        }
        modal.innerHTML += html;
        modal.style.display = 'block';
        document.getElementById('close-workout-modal').onclick = () => {
            modal.style.display = 'none';
            modal.innerHTML = `<button id='close-workout-modal' style='position:absolute;top:12px;right:18px;font-size:20px;background:none;border:none;cursor:pointer;'>&times;</button>`;
        };
    };
    // 计划页面聊天框（类似 ChatGPT）
    const planChatBox = document.getElementById('plan-chat-box');
    const planChatInput = document.getElementById('plan-chat-input');
    const planChatSend = document.getElementById('plan-chat-send');

    // 对话框消息渲染
    const appendPlanChatMessage = (message, sender = 'user') => {
        const msgDiv = document.createElement('div');
        msgDiv.className = `chat-message ${sender}-message`;
        if (window.marked && sender === 'ai') msgDiv.innerHTML = marked.parse(message);
        else msgDiv.textContent = message;
        planChatBox.appendChild(msgDiv);
        planChatBox.scrollTop = planChatBox.scrollHeight;
        return msgDiv;
    };

    // 发送需求并获取AI回复，使用后端结构化 JSON 渲染训练日与 GIF
    const handlePlanChatSend = async () => {
        const customRequest = planChatInput.value.trim();
        if (!customRequest) return;
        appendPlanChatMessage(customRequest, 'user');
        planChatInput.value = '';
        const thinking = appendPlanChatMessage('AI 正在思考中...', 'ai');
        const userProfile = JSON.parse(localStorage.getItem('userProfile') || '{}');
        try {
            // 1. 请求AI回复
            const aiRes = await fetch('http://localhost:3000/api/dispatch', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    condition: "A",
                    userProfile,
                    customRequest
                })
            });
            const aiResult = await aiRes.json();
            if (thinking && thinking.parentNode) thinking.parentNode.removeChild(thinking);
            if (aiResult && (aiResult.json || aiResult.text)) {
                if (aiResult.text) {
                    // 优先 markdown 渲染；若失败则以纯文本保底
                    try { appendPlanChatMessage(aiResult.text, 'ai'); }
                    catch { const div = document.createElement('div'); div.className='chat-message ai-message'; div.textContent = aiResult.text; planChatBox.appendChild(div); }
                    console.log('[plan] ai text length =', aiResult.textLength);
                }
                const parsed = aiResult.json || {};
                // 2. 遍历训练日，补充 GIF（并行提升速度）
                if (parsed.workoutPlan && Array.isArray(parsed.workoutPlan.trainingDays)) {
                    for (const day of parsed.workoutPlan.trainingDays) {
                        if (!Array.isArray(day.exercises)) continue;
                        const tasks = day.exercises.map(async (ex) => {
                            ex.gifUrl = await fetchExerciseGif(ex.name);
                            return ex;
                        });
                        await Promise.all(tasks);
                    }
                }
                // 3. 保存到全局并渲染月历与饮食
                lastParsedPlan = parsed;
                renderMonthlyCalendar(calendarYear, calendarMonth, lastParsedPlan);
                // 4. 饮食建议渲染
                renderDietFromJson(parsed);
                // 5. 默认选中当月当天（若该星期有计划），否则选中第一个有计划的日期
                const calendarEl = document.getElementById('plan-calendar');
                if (calendarEl) {
                    const today = new Date();
                    const sameMonth = (today.getFullYear() === calendarYear && today.getMonth() === calendarMonth);
                    let targetCell = null;
                    if (sameMonth) {
                        const w = today.getDay();
                        const label = `${calendarMonth + 1}/${today.getDate()}`;
                        targetCell = calendarEl.querySelector(`.calendar-day.has-plan[data-w='${w}'][data-date='${label}']`);
                    }
                    if (!targetCell) targetCell = calendarEl.querySelector('.calendar-day.has-plan');
                    if (targetCell) targetCell.click();
                }
            } else {
                appendPlanChatMessage('未能获取AI回复。', 'ai');
            }
        } catch (error) {
            if (thinking && thinking.parentNode) thinking.parentNode.removeChild(thinking);
            appendPlanChatMessage('计划生成失败，请稍后再试。', 'ai');
        }
    };

    if (planChatSend) {
        planChatSend.addEventListener('click', handlePlanChatSend);
    }
    if (planChatInput) {
        planChatInput.addEventListener('keydown', (event) => {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                handlePlanChatSend();
            }
        });
    }
    // 通过 PLAN_APP_ID 获取计划内容
    const fetchPlanSummary = async (userProfile, customRequest) => {
        const planSummaryEl = document.getElementById('plan-summary');
        planSummaryEl.innerHTML = '正在加载您的专属计划...';
        try {
            const response = await fetch(`https://api.example.com/plan?appid=PLAN_APP_ID`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userProfile, customRequest })
            });
            const result = await response.json();
            if (result && result.plan_markdown) {
                planSummaryEl.innerHTML = window.marked ? marked.parse(result.plan_markdown) : result.plan_markdown;
            } else {
                planSummaryEl.innerHTML = '<p style="color:red;">未能获取有效计划。</p>';
            }
        } catch (error) {
            planSummaryEl.innerHTML = '<p style="color:red;">计划加载失败，请稍后再试。</p>';
        }
    };
    // ---- 月历状态与工具 ----
    let calendarYear = new Date().getFullYear();
    let calendarMonth = new Date().getMonth(); // 0-11
    let lastParsedPlan = null; // 最近一次 A 分支 JSON

    const zhWeekToIndex = (dayName) => {
        const map = { '周日': 0, '周一': 1, '周二': 2, '周三': 3, '周四': 4, '周五': 5, '周六': 6 };
        const cleaned = String(dayName || '').trim();
        if (map.hasOwnProperty(cleaned)) return map[cleaned];
        const alt = cleaned.replace('星期', '周');
        return map.hasOwnProperty(alt) ? map[alt] : null;
    };

    const buildTrainingWeekdaySet = (parsed) => {
        const set = new Set();
        const list = parsed && parsed.workoutPlan && Array.isArray(parsed.workoutPlan.trainingDays)
            ? parsed.workoutPlan.trainingDays : [];
        list.forEach(d => {
            const idx = zhWeekToIndex(d.dayName);
            if (idx !== null && idx !== undefined) set.add(idx);
        });
        return set;
    };

    const findDayPlanByWeekday = (parsed, weekdayIndex) => {
        const list = parsed && parsed.workoutPlan && Array.isArray(parsed.workoutPlan.trainingDays)
            ? parsed.workoutPlan.trainingDays : [];
        for (const d of list) {
            if (zhWeekToIndex(d.dayName) === weekdayIndex) return d;
        }
        return null;
    };

    const formatDateLabel = (y, m, day) => {
        const mm = m + 1;
        return `${mm}/${day}`;
    };

    // 渲染某个月历（含 7 列 + 最多 6 行）并高亮有训练计划的日期
    const renderMonthlyCalendar = (year, month, parsed) => {
        const calendarEl = document.getElementById('plan-calendar');
        const titleEl = document.getElementById('calendar-title');
        if (!calendarEl || !titleEl) return;
        const weekDays = ['日','一','二','三','四','五','六'];
        const firstDay = new Date(year, month, 1);
        const startWeekday = firstDay.getDay();
        const daysInMonth = new Date(year, month + 1, 0).getDate();
        const trainingWeekdays = buildTrainingWeekdaySet(parsed || lastParsedPlan || {});

        titleEl.textContent = `${year}年 ${month + 1}月`;

        let html = '';
        for (let i = 0; i < 7; i++) {
            html += `<div style='font-weight:bold;color:#888;'>${weekDays[i]}</div>`;
        }
        for (let i = 0; i < startWeekday; i++) html += `<div></div>`;
        for (let d = 1; d <= daysInMonth; d++) {
            const dateObj = new Date(year, month, d);
            const w = dateObj.getDay();
            const label = formatDateLabel(year, month, d);
            const hasPlan = trainingWeekdays.has(w);
            const classes = ['calendar-day'];
            if (hasPlan) classes.push('has-plan');
            html += `<div class='${classes.join(' ')}' data-date='${label}' data-w='${w}'>${d}</div>`;
        }
        const totalCells = 7 + startWeekday + daysInMonth;
        const rows = Math.ceil((totalCells - 7) / 7);
        const cellsToFill = rows < 6 ? (6 - rows) * 7 : 0;
        for (let i = 0; i < cellsToFill; i++) html += `<div></div>`;

        calendarEl.innerHTML = html;

        calendarEl.onclick = (e) => {
            const cell = e.target.closest('.calendar-day');
            if (!cell) return;
            calendarEl.querySelectorAll('.calendar-day').forEach(el => el.classList.remove('active'));
            cell.classList.add('active');
            const w = Number(cell.getAttribute('data-w'));
            const dateLabel = cell.getAttribute('data-date');
            const dayPlan = findDayPlanByWeekday(lastParsedPlan || parsed || {}, w);
            if (dayPlan) {
                const dayCopy = { ...dayPlan, date: dateLabel };
                renderSelectedDayDetail(dayCopy);
            } else {
                renderSelectedDayDetail({ date: dateLabel, exercises: [] });
            }
        };
    };

    // 渲染选中日期详情
    const renderSelectedDayDetail = (dayPlan) => {
        const container = document.getElementById('plan-day-detail');
        if (!container) return;
        let html = '';
        const dayLabel = dayPlan.date || dayPlan.dayName || '';
        html += `<div class='plan-card' style='margin-bottom:12px;'>`;
        html += `<div style='font-weight:bold;margin-bottom:6px;'>${dayLabel}${dayPlan.title ? `｜${dayPlan.title}` : ''}</div>`;
        if (Array.isArray(dayPlan.exercises) && dayPlan.exercises.length > 0) {
            dayPlan.exercises.forEach(ex => {
                html += `<div style='display:flex;gap:12px;align-items:flex-start;margin-bottom:8px;'>` +
                        `<div style='min-width:120px;'>${ex.gifUrl ? `<img src='${ex.gifUrl}' style='max-width:120px;border-radius:8px;'>` : ''}</div>` +
                        `<div>` +
                            `<div><strong>${ex.name || ''}</strong></div>` +
                            `<div style='color:#555;'>组数: ${ex.sets || '-'}，次数: ${ex.reps || '-'}</div>` +
                            `${ex.notes ? `<div style='color:#777;'>备注: ${ex.notes}</div>` : ''}` +
                        `</div>` +
                    `</div>`;
            });
        } else {
            html += `<div style='color:#777;'>暂无训练日数据。</div>`;
        }
        html += `</div>`;
        container.innerHTML = html;
    };

    // 基于后端 JSON 渲染训练日小组件（按天）
    const renderTrainingDayCards = (parsed) => {
        const container = document.getElementById('plan-day-detail');
        if (!container) return;
        const days = parsed && parsed.workoutPlan && Array.isArray(parsed.workoutPlan.trainingDays)
            ? parsed.workoutPlan.trainingDays
            : [];
        if (days.length === 0) {
            container.innerHTML = '<p style="color:#888;">暂无训练日数据。</p>';
            return;
        }
        let html = '';
        days.forEach((day, idx) => {
            const dayLabel = day.date || day.dayName || `Day ${idx + 1}`;
            html += `<div class='plan-card' style='margin-bottom:12px;'>`;
            html += `<div style='font-weight:bold;margin-bottom:6px;'>${dayLabel}｜${day.title || ''}</div>`;
            if (Array.isArray(day.exercises) && day.exercises.length > 0) {
                day.exercises.forEach(ex => {
                    html += `<div style='display:flex;gap:12px;align-items:flex-start;margin-bottom:8px;'>` +
                            `<div style='min-width:120px;'>${ex.gifUrl ? `<img src='${ex.gifUrl}' style='max-width:120px;border-radius:8px;'>` : ''}</div>` +
                            `<div>` +
                                `<div><strong>${ex.name || ''}</strong></div>` +
                                `<div style='color:#555;'>组数: ${ex.sets || '-'}，次数: ${ex.reps || '-'}</div>` +
                                `${ex.notes ? `<div style='color:#777;'>备注: ${ex.notes}</div>` : ''}` +
                            `</div>` +
                        `</div>`;
                });
            } else {
                html += `<div style='color:#777;'>无动作。</div>`;
            }
            html += `</div>`;
        });
        container.innerHTML = html;
    };

    // 基于后端 JSON 渲染饮食建议
    const renderDietFromJson = (parsed) => {
        const planSummaryEl = document.getElementById('plan-summary');
        if (!planSummaryEl) return;
        const diet = parsed && parsed.dietPlan ? parsed.dietPlan : null;
        if (!diet) return;
        let dietHtml = '<h3>饮食建议</h3>';
        if (diet.dailyCalories) {
            dietHtml += `<div class='plan-card'>热量: ${diet.dailyCalories}</div>`;
        }
        if (Array.isArray(diet.notes) && diet.notes.length) {
            dietHtml += `<div class='plan-card'><strong>注意事项</strong><ul style='margin:6px 0 0 18px;'>` + diet.notes.map(n => `<li>${n}</li>`).join('') + `</ul></div>`;
        }
        if (Array.isArray(diet.meals) && diet.meals.length) {
            diet.meals.forEach(meal => {
                dietHtml += `<div class='plan-card'><strong>${meal.name || '餐食'}</strong><br>${meal.details || ''}</div>`;
            });
        }
        planSummaryEl.innerHTML += dietHtml;
    };
    // 检查 marked.js 是否加载，否则动态加载
    if (!window.marked) {
        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/marked/marked.min.js';
        document.head.appendChild(script);
    }
    // --- 元素获取 ---
    const onboardingModal = document.getElementById('onboarding-modal');
    const userInfoForm = document.getElementById('user-info-form');
    const profileText = document.getElementById('profile-text');
    const editProfileBtn = document.getElementById('edit-profile-btn');
    const navButtons = document.querySelectorAll('.nav-btn');
    const contentSlider = document.getElementById('content-slider');
    const generateRouteBtn = document.getElementById('generate-route-btn'); // 新增
    const chatBox = document.getElementById('chat-box');
    const chatInput = document.getElementById('chat-input');
    const sendChatBtn = document.getElementById('send-chat-btn');

    // --- 数据映射 ---
    const goalMap = {
        'weight_loss': '减脂塑形',
        'muscle_gain': '增肌',
        'keep_fit': '保持健康'
    };

    // --- 功能函数 ---

    // 检查用户资料是否存在
    const checkUserProfile = () => {
        const userProfile = localStorage.getItem('userProfile');
        if (!userProfile) {
            onboardingModal.style.display = 'flex';
        } else {
            onboardingModal.style.display = 'none';
            const profile = JSON.parse(userProfile);
            updateProfileDisplay(profile);
        }
    };

    // 更新顶部显示的用户信息
    const updateProfileDisplay = (profile) => {
        const displayGoal = goalMap[profile.goal] || profile.goal;
        profileText.textContent = `身高: ${profile.height}cm | 体重: ${profile.weight}kg | 目标: ${displayGoal}`;
    };

    // 渲染锻炼日历
    const renderWorkoutCalendar = (content) => {
        const calendarEl = document.getElementById('workout-calendar');
        calendarEl.innerHTML = `<h3>本周锻炼日历</h3>` + (window.marked ? marked.parse(content) : content);
    };
    
    // 渲染饮食建议
    const renderDietRecommendation = (content) => {
        const dietEl = document.getElementById('diet-recommendation');
        dietEl.innerHTML = `<h3>今日饮食建议</h3>` + (window.marked ? marked.parse(content) : content);
    };

    // 使用 BMapGL 在路线页绘制固定点（不依赖 AI）
    const initRouteMapWithPoint = (routeData) => {
        try {
            if (!window.BMapGL) {
                document.getElementById('map').innerHTML = '地图脚本未加载。';
                return;
            }
            const map = new BMapGL.Map('map');
            // 支持外部传入 { start: [lng, lat], end: [lng, lat] }
            let p1, p2;
            if (routeData && Array.isArray(routeData.start) && Array.isArray(routeData.end)) {
                p1 = new BMapGL.Point(Number(routeData.start[0]), Number(routeData.start[1]));
                p2 = new BMapGL.Point(Number(routeData.end[0]), Number(routeData.end[1]));
            } else {
                // 默认回退为之前的两个点
                p1 = new BMapGL.Point(116.41478, 39.911901);
                p2 = new BMapGL.Point(116.41425, 39.911998);
            }
            map.centerAndZoom(p1, 16);
            map.enableScrollWheelZoom(true);

            // 自定义图标（根目录 point.png 通过 /assets 暴露）
            const icon = new BMapGL.Icon('/assets/point.png', new BMapGL.Size(24, 24), {
                anchor: new BMapGL.Size(12, 12)
            });
            const m1 = new BMapGL.Marker(p1, { icon });
            const m2 = new BMapGL.Marker(p2, { icon });
            map.addOverlay(m1);
            map.addOverlay(m2);

            // 添加起点和终点标签
            const label1 = new BMapGL.Label('起点', {
                position: p1,
                offset: new BMapGL.Size(15, -30)
            });
            label1.setStyle({
                color: '#333',
                fontSize: '14px',
                backgroundColor: 'rgba(255,255,255,0.8)',
                border: '1px solid #ccc',
                borderRadius: '4px',
                padding: '2px 6px'
            });
            map.addOverlay(label1);

            const label2 = new BMapGL.Label('终点', {
                position: p2,
                offset: new BMapGL.Size(15, -30)
            });
            label2.setStyle({
                color: '#333',
                fontSize: '14px',
                backgroundColor: 'rgba(255,255,255,0.8)',
                border: '1px solid #ccc',
                borderRadius: '4px',
                padding: '2px 6px'
            });
            map.addOverlay(label2);

            // 视野自适应两个点
            try {
                map.setViewport([p1, p2]);
            } catch (e) {
                // 兼容性兜底：取两点中心
                const cenLng = (p1.lng + p2.lng) / 2;
                const cenLat = (p1.lat + p2.lat) / 2;
                map.centerAndZoom(new BMapGL.Point(cenLng, cenLat), 17);
            }
        } catch (e) {
            console.error('BMapGL init error:', e);
            document.getElementById('map').innerHTML = '地图加载失败。';
        }
    };

    // --- 生成健身饮食计划 ---
    const generatePlanWithAI = async (userProfile, customRequest) => {
        renderWorkoutCalendar("AI正在为您生成锻炼计划...");
        renderDietRecommendation("AI正在为您生成饮食建议...");

        try {
            const response = await fetch('http://localhost:3000/api/dispatch', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    condition: "A",
                    userProfile,
                    customRequest
                })
            });
            const result = await response.json();
            if (result && result.text) {
                // 假设AI返回的是 markdown 格式
                let workoutPart = "";
                let dietPart = "";
                if (result.text.includes("## 饮食建议")) {
                    workoutPart = result.text.split("## 饮食建议")[0];
                    dietPart = "## 饮食建议" + result.text.split("## 饮食建议")[1];
                } else {
                    workoutPart = result.text;
                }
                renderWorkoutCalendar(workoutPart);
                renderDietRecommendation(dietPart);
            } else {
                renderWorkoutCalendar("<p style='color:red;'>未能获取有效计划。</p>");
                renderDietRecommendation("");
            }
        } catch (error) {
            console.error("AI plan generation failed:", error);
            renderWorkoutCalendar("<p style='color:red;'>计划生成失败，请稍后再试。</p>");
            renderDietRecommendation("");
        }
    };

    // --- 生成锻炼路线描述 ---
    const generateRouteWithAI = async () => {
        const routeRequestInput = document.getElementById("route-request-input");
        const routeBox = document.getElementById('route-chat-box');
        const userRequest = routeRequestInput.value.trim();

        if (userRequest === "") return;

        // 用户消息
        const userMsg = document.createElement('div');
        userMsg.className = 'chat-message user-message';
        userMsg.textContent = userRequest;
        routeBox.appendChild(userMsg);
        routeBox.scrollTop = routeBox.scrollHeight;
        routeRequestInput.value = '';

        // 思考中
        const thinking = document.createElement('div');
        thinking.className = 'chat-message ai-message';
        thinking.textContent = 'AI 正在思考中...';
        routeBox.appendChild(thinking);
        routeBox.scrollTop = routeBox.scrollHeight;

        try {
            // 第一步：AI生成路线描述
            const response = await fetch('http://localhost:3000/api/dispatch', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    condition: "B",
                    customRequest: userRequest
                })
            });
            const result = await response.json();
            console.log('B分支完整返回:', result); // 调试用
            
            if (thinking && thinking.parentNode) thinking.parentNode.removeChild(thinking);
            
            // 显示AI路线描述
            const aiMsg = document.createElement('div');
            aiMsg.className = 'chat-message ai-message';
            if (window.marked && result && result.text) aiMsg.innerHTML = marked.parse(result.text);
            else aiMsg.textContent = (result && result.text) ? result.text : '未能获取有效的AI回复。';
            routeBox.appendChild(aiMsg);
            routeBox.scrollTop = routeBox.scrollHeight;

            // 第二步：检查并处理坐标数据
            if (result && result.index) {
                console.log('获取到index数据:', result.index);
                try {
                    const routeData = result.index;
                    
                    // 验证数据格式
                    if (routeData.start && routeData.end && 
                        Array.isArray(routeData.start) && Array.isArray(routeData.end)) {
                        
                        // 调用地图函数绘制路线（此时才初始化地图）
                        initRouteMapWithPoint(routeData);
                        
                        // 在聊天中显示坐标信息
                        const coordMsg = document.createElement('div');
                        coordMsg.className = 'chat-message ai-message';
                        coordMsg.textContent = `已在地图上标记路线：起点 ${routeData.start}，终点 ${routeData.end}`;
                        routeBox.appendChild(coordMsg);
                        routeBox.scrollTop = routeBox.scrollHeight;
                    } else {
                        console.error('坐标数据格式错误:', routeData);
                        const formatErrMsg = document.createElement('div');
                        formatErrMsg.className = 'chat-message ai-message';
                        formatErrMsg.textContent = '坐标数据格式错误，无法绘制地图。';
                        routeBox.appendChild(formatErrMsg);
                        routeBox.scrollTop = routeBox.scrollHeight;
                    }
                } catch (mapError) {
                    console.error('Map rendering error:', mapError);
                    const mapErrMsg = document.createElement('div');
                    mapErrMsg.className = 'chat-message ai-message';
                    mapErrMsg.textContent = '路线描述已生成，但地图绘制失败。';
                    routeBox.appendChild(mapErrMsg);
                    routeBox.scrollTop = routeBox.scrollHeight;
                }
            } else {
                console.log('未获取到index数据');
                const noIndexMsg = document.createElement('div');
                noIndexMsg.className = 'chat-message ai-message';
                noIndexMsg.textContent = '路线描述已生成，但未获取到坐标信息。';
                routeBox.appendChild(noIndexMsg);
                routeBox.scrollTop = routeBox.scrollHeight;
            }
        } catch (error) {
            console.error('Route generation error:', error);
            if (thinking && thinking.parentNode) thinking.parentNode.removeChild(thinking);
            const err = document.createElement('div');
            err.className = 'chat-message ai-message';
            err.textContent = '路线生成失败，请稍后再试。';
            routeBox.appendChild(err);
            routeBox.scrollTop = routeBox.scrollHeight;
        }
    };

    // --- 运动医疗咨询 ---
    const sendMessageToAI = async (userMessage) => {
        appendMessage(userMessage, 'user');
        chatInput.value = '';

        const thinkingElement = document.createElement('div');
        thinkingElement.className = 'chat-message ai-message';
        thinkingElement.textContent = 'AI 正在思考中...';
        chatBox.appendChild(thinkingElement);
        chatBox.scrollTop = chatBox.scrollHeight;

        // 用户资料上下文
        const userProfileString = localStorage.getItem('userProfile');
        const userProfile = userProfileString ? JSON.parse(userProfileString) : {};
        const displayGoal = goalMap[userProfile.goal] || '未指定';
        const profileContext = `用户的基本信息是：身高 ${userProfile.height || '未知'}cm, 体重 ${userProfile.weight || '未知'}kg, 健身目标是 ${displayGoal}.`;

        try {
            const response = await fetch('http://localhost:3000/api/dispatch', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    condition: "C",
                    userMessage,
                    profileContext
                })
            });

            chatBox.removeChild(thinkingElement);

            const result = await response.json();
            if (result && result.text) {
                appendMessage(result.text, 'ai', true);
            } else {
                appendMessage('抱歉，AI未返回有效内容。', 'ai');
            }
        } catch (error) {
            console.error('聊天功能出错:', error);
            chatBox.removeChild(thinkingElement);
            appendMessage(`抱歉，连接服务时出错：${error.message}`, 'ai');
        }
    };

    const appendMessage = (message, sender) => {
        const messageElement = document.createElement('div');
        messageElement.className = `chat-message ${sender}-message`;
        // 支持 Markdown 渲染
        if (window.marked && sender === 'ai') {
            messageElement.innerHTML = marked.parse(message);
        } else {
            messageElement.textContent = message;
        }
        chatBox.appendChild(messageElement);
        chatBox.scrollTop = chatBox.scrollHeight;
    };
    
    // --- 事件监听器 ---
    // 美化输入区域（路线输入、聊天输入）
    const beautifyInputUI = () => {
        const routeInput = document.getElementById('route-request-input');
        const routeBtn = document.getElementById('generate-route-btn');
        const chatInputEl = document.getElementById('chat-input');
        const chatBtn = document.getElementById('send-chat-btn');
        if (routeInput) {
            routeInput.style.boxShadow = '0 2px 8px rgba(0,123,255,0.08)';
            routeInput.style.border = '1.5px solid #007BFF';
            routeInput.style.borderRadius = '8px';
            routeInput.style.background = '#f4f7f6';
            routeInput.style.fontSize = '17px';
        }
        if (routeBtn) {
            routeBtn.style.borderRadius = '8px';
            routeBtn.style.boxShadow = '0 2px 8px rgba(0,123,255,0.08)';
            routeBtn.style.fontWeight = 'bold';
        }
        if (chatInputEl) {
            chatInputEl.style.boxShadow = '0 2px 8px rgba(0,123,255,0.08)';
            chatInputEl.style.border = '1.5px solid #007BFF';
            chatInputEl.style.borderRadius = '8px';
            chatInputEl.style.background = '#f4f7f6';
            chatInputEl.style.fontSize = '17px';
        }
        if (chatBtn) {
            chatBtn.style.borderRadius = '8px';
            chatBtn.style.boxShadow = '0 2px 8px rgba(0,123,255,0.08)';
            chatBtn.style.fontWeight = 'bold';
        }
    };

    // 提交基本信息表单
    userInfoForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const userProfile = {
            height: document.getElementById('height').value,
            weight: document.getElementById('weight').value,
            goal: document.getElementById('goal').value,
            frequency: document.getElementById('frequency').value
        };
        localStorage.setItem('userProfile', JSON.stringify(userProfile));
        onboardingModal.style.display = 'none';
        updateProfileDisplay(userProfile);
    });

    // 编辑按钮
    editProfileBtn.addEventListener('click', () => {
        onboardingModal.style.display = 'flex';
    });
    
    // 导航按钮切换
    navButtons.forEach((button, index) => {
        button.addEventListener('click', () => {
            navButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            contentSlider.style.transform = `translateX(-${index * (100 / navButtons.length)}%)`;
        });
    });

    // 生成路线按钮
    generateRouteBtn.addEventListener('click', generateRouteWithAI);

    // 聊天发送按钮
    sendChatBtn.addEventListener('click', () => sendMessageToAI(chatInput.value.trim()));
    chatInput.addEventListener('keydown', (event) => {
        if (event.key === 'Enter' && !event.shiftKey) {
            event.preventDefault();
            sendMessageToAI(chatInput.value.trim());
        }
    });

    checkUserProfile();
    beautifyInputUI();
    // 月份切换
    const prevBtn = document.getElementById('prev-month-btn');
    const nextBtn = document.getElementById('next-month-btn');
    if (prevBtn) prevBtn.onclick = () => {
        calendarMonth -= 1;
        if (calendarMonth < 0) { calendarMonth = 11; calendarYear -= 1; }
        renderMonthlyCalendar(calendarYear, calendarMonth, lastParsedPlan);
    };
    if (nextBtn) nextBtn.onclick = () => {
        calendarMonth += 1;
        if (calendarMonth > 11) { calendarMonth = 0; calendarYear += 1; }
        renderMonthlyCalendar(calendarYear, calendarMonth, lastParsedPlan);
    };
    renderMonthlyCalendar(calendarYear, calendarMonth, lastParsedPlan);

}); 
